{"ast":null,"code":"const initialState = {\n  data: {\n    Left: [{\n      id: 0,\n      title: 'Left 0'\n    }, {\n      id: 1,\n      title: 'Left 1'\n    }, {\n      id: 2,\n      title: 'Left 2'\n    }],\n    Middle: [{\n      id: 3,\n      title: 'Middle 0'\n    }, {\n      id: 4,\n      title: 'Middle 1'\n    }, {\n      id: 5,\n      title: 'Middle 2'\n    }],\n    Right: [{\n      id: 6,\n      title: 'Right 0'\n    }, {\n      id: 7,\n      title: 'Right 1'\n    }, {\n      id: 8,\n      title: 'Right 2'\n    }],\n    aaa: [{\n      id: 13,\n      title: 'a 10'\n    }, {\n      id: 14,\n      title: 'a 11'\n    }, {\n      id: 15,\n      title: 'a 12'\n    }]\n  }\n};\n\nconst onMove = (state, payload) => {\n  const {\n    id,\n    from,\n    to\n  } = payload;\n  const {\n    data\n  } = state;\n  const idx = data[from].findIndex(item => item.id === id);\n  const currentItem = data[from][idx];\n  return {\n    [from]: [...data[from].slice(0, idx), ...data[from].slice(idx + 1)],\n    [to]: [...data[to], currentItem]\n  };\n};\n\nconst onMoveGroup = (state, payload) => {\n  const {\n    ids,\n    from,\n    to\n  } = payload;\n  if (ids.length === 0) return;\n  ids.map(id => this.onMove(state, {\n    id,\n    from,\n    to\n  }));\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'MOVE_ITEM':\n      return onMove(state, action.payload);\n\n    case \"MOVE_ITEM_GROUP\":\n      return onMoveGroup(state, action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/React-apps/test-app/test-app/src/reducers/index.js"],"names":["initialState","data","Left","id","title","Middle","Right","aaa","onMove","state","payload","from","to","idx","findIndex","item","currentItem","slice","onMoveGroup","ids","length","map","reducer","action","type"],"mappings":"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","sourcesContent":["const initialState = {\r\n    data:{\r\n        Left: [\r\n            {id: 0, title: 'Left 0'},\r\n            {id: 1, title: 'Left 1'},\r\n            {id: 2, title: 'Left 2'},\r\n        ],\r\n        Middle: [\r\n            {id: 3, title: 'Middle 0'},\r\n            {id: 4, title: 'Middle 1'},\r\n            {id: 5, title: 'Middle 2'},\r\n        ],\r\n        \r\n        Right: [\r\n            {id: 6, title: 'Right 0'},\r\n            {id: 7, title: 'Right 1'},\r\n            {id: 8, title: 'Right 2'},\r\n        ],\r\n        aaa: [\r\n            {id: 13, title: 'a 10'},\r\n            {id: 14, title: 'a 11'},\r\n            {id: 15, title: 'a 12'},\r\n        ]\r\n    }\r\n    };\r\n    \r\n  \r\n    const onMove = (state, payload) => {\r\n            const {id, from, to } = payload\r\n            const {data} = state\r\n            const idx = data[from].findIndex((item) => item.id === id)\r\n            const currentItem = data[from][idx]\r\n\r\n            return { \r\n              [from] :[\r\n                ...data[from].slice(0, idx),\r\n                ...data[from].slice(idx + 1)\r\n              ] , \r\n              [to]: [...data[to], currentItem]\r\n            }\r\n             \r\n    }\r\n\r\n  const   onMoveGroup = (state, payload) => {\r\n    const {ids, from, to } = payload\r\n      if(ids.length === 0) return  \r\n      ids.map((id)=> this.onMove(state,{id, from, to}))      \r\n  }\r\n\r\n  const reducer = (state = initialState, action) => {\r\n  \r\n    switch (action.type) {\r\n      case 'MOVE_ITEM':\r\n        return  onMove(state, action.payload)\r\n      case \"MOVE_ITEM_GROUP\":\r\n        return onMoveGroup(state, action.payload)\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default reducer;"]},"metadata":{},"sourceType":"module"}