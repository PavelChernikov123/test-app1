{"ast":null,"code":"const initialState = {\n  data: {\n    Left: []\n  }\n};\n\nconst onMove = (state, payload) => {\n  const {\n    id,\n    from,\n    to\n  } = payload;\n  const {\n    data\n  } = state;\n  const idx = data[from].findIndex(item => item.id === id);\n  const currentItem = data[from][idx];\n  return {\n    data: {\n      [from]: [...data[from].slice(0, idx), ...data[from].slice(idx + 1)],\n      [to]: [...data[to], currentItem]\n    }\n  };\n};\n\nconst onMoveGroup = (state = initialState, payload) => {\n  const {\n    ids,\n    from,\n    to\n  } = payload;\n  if (ids.length === 0) return;\n  ids.map(id => this.onMove(state, {\n    id,\n    from,\n    to\n  }));\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'MOVE_ITEM':\n      return onMove(state, action.payload);\n\n    case \"MOVE_ITEM_GROUP\":\n      return onMoveGroup(state, action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/React-apps/test-app/test-app/src/reducers/index.js"],"names":["initialState","data","Left","onMove","state","payload","id","from","to","idx","findIndex","item","currentItem","slice","onMoveGroup","ids","length","map","reducer","action","type"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,IAAI,EAAE;AADL;AADY,CAArB;;AAUI,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC3B,QAAM;AAACC,IAAAA,EAAD;AAAKC,IAAAA,IAAL;AAAWC,IAAAA;AAAX,MAAkBH,OAAxB;AACA,QAAM;AAACJ,IAAAA;AAAD,MAASG,KAAf;AACA,QAAMK,GAAG,GAAGR,IAAI,CAACM,IAAD,CAAJ,CAAWG,SAAX,CAAsBC,IAAD,IAAUA,IAAI,CAACL,EAAL,KAAYA,EAA3C,CAAZ;AACA,QAAMM,WAAW,GAAGX,IAAI,CAACM,IAAD,CAAJ,CAAWE,GAAX,CAApB;AAEA,SAAO;AACLR,IAAAA,IAAI,EAAC;AACH,OAACM,IAAD,GAAQ,CACR,GAAGN,IAAI,CAACM,IAAD,CAAJ,CAAWM,KAAX,CAAiB,CAAjB,EAAoBJ,GAApB,CADK,EAER,GAAGR,IAAI,CAACM,IAAD,CAAJ,CAAWM,KAAX,CAAiBJ,GAAG,GAAG,CAAvB,CAFK,CADL;AAKL,OAACD,EAAD,GAAM,CAAC,GAAGP,IAAI,CAACO,EAAD,CAAR,EAAcI,WAAd;AALD;AADA,GAAP;AAUP,CAhBD;;AAkBF,MAAQE,WAAW,GAAG,CAACV,KAAK,GAAGJ,YAAT,EAAuBK,OAAvB,KAAmC;AACvD,QAAM;AAACU,IAAAA,GAAD;AAAMR,IAAAA,IAAN;AAAYC,IAAAA;AAAZ,MAAmBH,OAAzB;AACE,MAAGU,GAAG,CAACC,MAAJ,KAAe,CAAlB,EAAqB;AACrBD,EAAAA,GAAG,CAACE,GAAJ,CAASX,EAAD,IAAO,KAAKH,MAAL,CAAYC,KAAZ,EAAkB;AAACE,IAAAA,EAAD;AAAKC,IAAAA,IAAL;AAAWC,IAAAA;AAAX,GAAlB,CAAf;AACH,CAJD;;AAMA,MAAMU,OAAO,GAAG,CAACd,KAAD,EAASe,MAAT,KAAoB;AAElC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAQjB,MAAM,CAACC,KAAD,EAAQe,MAAM,CAACd,OAAf,CAAd;;AACF,SAAK,iBAAL;AACE,aAAOS,WAAW,CAACV,KAAD,EAAQe,MAAM,CAACd,OAAf,CAAlB;;AACF;AACE,aAAOD,KAAP;AANJ;AAQD,CAVD;;AAYA,eAAec,OAAf","sourcesContent":["const initialState = {\r\n    data:{\r\n        Left: [\r\n            \r\n        ],\r\n        \r\n    }\r\n    };\r\n    \r\n  \r\n    const onMove = (state, payload) => {\r\n            const {id, from, to } = payload\r\n            const {data} = state\r\n            const idx = data[from].findIndex((item) => item.id === id)\r\n            const currentItem = data[from][idx]\r\n\r\n            return { \r\n              data:{\r\n                [from] :[\r\n                ...data[from].slice(0, idx),\r\n                ...data[from].slice(idx + 1)\r\n              ] , \r\n              [to]: [...data[to], currentItem]\r\n            }\r\n            }\r\n             \r\n    }\r\n\r\n  const   onMoveGroup = (state = initialState, payload) => {\r\n    const {ids, from, to } = payload\r\n      if(ids.length === 0) return  \r\n      ids.map((id)=> this.onMove(state,{id, from, to}))      \r\n  }\r\n\r\n  const reducer = (state , action) => {\r\n  \r\n    switch (action.type) {\r\n      case 'MOVE_ITEM':\r\n        return  onMove(state, action.payload)\r\n      case \"MOVE_ITEM_GROUP\":\r\n        return onMoveGroup(state, action.payload)\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default reducer;"]},"metadata":{},"sourceType":"module"}