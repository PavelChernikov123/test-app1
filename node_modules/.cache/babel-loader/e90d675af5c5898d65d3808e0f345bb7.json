{"ast":null,"code":"const initialState = {\n  data: []\n};\n\nconst onMove = (state, payload) => {\n  const {\n    ids,\n    from,\n    to\n  } = payload;\n  const {\n    data\n  } = state;\n  let updated = data;\n  ids.map(id => {\n    const idx = updated[from].findIndex(item => item.id === id);\n    const currentItem = updated[from][idx];\n    updated = { ...updated,\n      [from]: [...updated[from].slice(0, idx), ...updated[from].slice(idx + 1)],\n      [to]: [...updated[to], currentItem]\n    };\n    return true;\n  });\n  return {\n    data: updated\n  };\n};\n\nconst onMoveGroup = (state, payload) => {\n  const {\n    ids,\n    from,\n    to\n  } = payload;\n  if (ids.length === 0) return;\n  return ids.map(id => onMove(state, {\n    id,\n    from,\n    to\n  }));\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_DATA':\n      return {\n        state\n      };\n\n    case 'FETCH_DATA_SUCCESS':\n      return {\n        data: action.payload\n      };\n\n    case 'FETCH_DATA_ERROR':\n      return {\n        state\n      };\n\n    case 'MOVE_ITEM':\n      return onMove(state, action.payload);\n\n    case \"MOVE_ITEM_GROUP\":\n      return onMoveGroup(state, action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/React-apps/test-app/test-app/src/reducers/index.js"],"names":["initialState","data","onMove","state","payload","ids","from","to","updated","map","id","idx","findIndex","item","currentItem","slice","onMoveGroup","length","reducer","action","type"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB;;AAKI,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC3B,QAAM;AAACC,IAAAA,GAAD;AAAMC,IAAAA,IAAN;AAAYC,IAAAA;AAAZ,MAAmBH,OAAzB;AACA,QAAM;AAACH,IAAAA;AAAD,MAASE,KAAf;AACA,MAAIK,OAAO,GAAGP,IAAd;AACAI,EAAAA,GAAG,CAACI,GAAJ,CAASC,EAAD,IAAQ;AAEd,UAAMC,GAAG,GAAGH,OAAO,CAACF,IAAD,CAAP,CAAcM,SAAd,CAAyBC,IAAD,IAAUA,IAAI,CAACH,EAAL,KAAYA,EAA9C,CAAZ;AACA,UAAMI,WAAW,GAAGN,OAAO,CAACF,IAAD,CAAP,CAAcK,GAAd,CAApB;AAEAH,IAAAA,OAAO,GAAI,EACL,GAAGA,OADE;AAEL,OAACF,IAAD,GAAQ,CACR,GAAGE,OAAO,CAACF,IAAD,CAAP,CAAcS,KAAd,CAAoB,CAApB,EAAuBJ,GAAvB,CADK,EAER,GAAGH,OAAO,CAACF,IAAD,CAAP,CAAcS,KAAd,CAAoBJ,GAAG,GAAG,CAA1B,CAFK,CAFH;AAMP,OAACJ,EAAD,GAAM,CAAC,GAAGC,OAAO,CAACD,EAAD,CAAX,EAAiBO,WAAjB;AANC,KAAX;AAWA,WAAO,IAAP;AACD,GAjBD;AAmBA,SAAO;AAACb,IAAAA,IAAI,EAAGO;AAAR,GAAP;AAEP,CAzBD;;AA2BF,MAAQQ,WAAW,GAAG,CAACb,KAAD,EAAQC,OAAR,KAAoB;AACxC,QAAM;AAACC,IAAAA,GAAD;AAAMC,IAAAA,IAAN;AAAYC,IAAAA;AAAZ,MAAmBH,OAAzB;AACE,MAAGC,GAAG,CAACY,MAAJ,KAAe,CAAlB,EAAqB;AACrB,SAAOZ,GAAG,CAACI,GAAJ,CAASC,EAAD,IAAOR,MAAM,CAACC,KAAD,EAAO;AAACO,IAAAA,EAAD;AAAKJ,IAAAA,IAAL;AAAWC,IAAAA;AAAX,GAAP,CAArB,CAAP;AACH,CAJD;;AAMA,MAAMW,OAAO,GAAG,CAACf,KAAK,GAAGH,YAAT,EAAuBmB,MAAvB,KAAkC;AAEhD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,YAAL;AACI,aAAO;AACHjB,QAAAA;AADG,OAAP;;AAGJ,SAAK,oBAAL;AACI,aAAO;AACHF,QAAAA,IAAI,EAAEkB,MAAM,CAACf;AADV,OAAP;;AAGJ,SAAK,kBAAL;AACI,aAAO;AACHD,QAAAA;AADG,OAAP;;AAGN,SAAK,WAAL;AACE,aAAQD,MAAM,CAACC,KAAD,EAAQgB,MAAM,CAACf,OAAf,CAAd;;AACF,SAAK,iBAAL;AACE,aAAOY,WAAW,CAACb,KAAD,EAAQgB,MAAM,CAACf,OAAf,CAAlB;;AACF;AACE,aAAOD,KAAP;AAlBJ;AAoBD,CAtBD;;AAwBA,eAAee,OAAf","sourcesContent":["const initialState = {\r\n    data: []    \r\n}\r\n    \r\n  \r\n    const onMove = (state, payload) => {\r\n            const {ids, from, to } = payload\r\n            const {data} = state\r\n            let updated = data;\r\n            ids.map((id) => {\r\n\r\n              const idx = updated[from].findIndex((item) => item.id === id)\r\n              const currentItem = updated[from][idx]\r\n\r\n              updated =  {\r\n                    ...updated,\r\n                    [from] :[\r\n                    ...updated[from].slice(0, idx),\r\n                    ...updated[from].slice(idx + 1)\r\n                  ] , \r\n                  [to]: [...updated[to], currentItem]\r\n                \r\n                \r\n              }\r\n\r\n              return true;\r\n            })\r\n\r\n            return {data : updated};\r\n            \r\n    }\r\n\r\n  const   onMoveGroup = (state, payload) => {\r\n    const {ids, from, to } = payload\r\n      if(ids.length === 0) return  \r\n      return ids.map((id)=> onMove(state,{id, from, to}))      \r\n  }\r\n\r\n  const reducer = (state = initialState, action) => {\r\n  \r\n    switch (action.type) {\r\n        case 'FETCH_DATA':\r\n            return {\r\n                state\r\n            }\r\n        case 'FETCH_DATA_SUCCESS':\r\n            return {\r\n                data: action.payload,\r\n            }\r\n        case 'FETCH_DATA_ERROR':\r\n            return {\r\n                state\r\n            }\r\n      case 'MOVE_ITEM':\r\n        return  onMove(state, action.payload)\r\n      case \"MOVE_ITEM_GROUP\":\r\n        return onMoveGroup(state, action.payload)\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default reducer;"]},"metadata":{},"sourceType":"module"}